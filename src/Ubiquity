#!/usr/bin/env php
<?php
require __DIR__ . '/../../../../vendor/autoload.php';

use Ubiquity\cache\CacheManager;
use Ubiquity\core\Framework;
use Ubiquity\devtools\cmd\Command;
use Ubiquity\devtools\cmd\Console;
use Ubiquity\devtools\cmd\ConsoleFormatter;
use Ubiquity\devtools\cmd\commands\ConfigSetCmd;
use Ubiquity\devtools\cmd\commands\ConfigCmd;
use Ubiquity\devtools\cmd\commands\InfoRoutesCmd;
use Ubiquity\devtools\cmd\commands\InfoModelsCmd;
use Ubiquity\devtools\cmd\commands\InfoModelCmd;
use Ubiquity\devtools\cmd\commands\CrudCmd;
use Ubiquity\devtools\cmd\commands\IndexCrudCmd;
use Ubiquity\devtools\cmd\commands\InfoValidationCmd;
use Ubiquity\devtools\cmd\commands\NewActionCmd;
use Ubiquity\devtools\cmd\commands\AuthCmd;
use Ubiquity\devtools\cmd\commands\DAOCmd;
use Ubiquity\devtools\cmd\commands\RestCmd;
use Ubiquity\devtools\cmd\commands\RestApiCmd;
use Ubiquity\devtools\cmd\commands\InstallThemeCmd;
use Ubiquity\devtools\cmd\commands\NewThemeCmd;
use Ubiquity\devtools\cmd\commands\InfoMailerCmd;
use Ubiquity\devtools\cmd\commands\SendMailQueueCmd;
use Ubiquity\devtools\cmd\commands\NewMailCmd;
use Ubiquity\devtools\cmd\commands\CreateCommandCmd;
use Ubiquity\devtools\cmd\commands\HelpCmd;
use Ubiquity\devtools\cmd\traits\CmdTrait;
use Ubiquity\devtools\utils\FileUtils;
use Ubiquity\orm\DAO;
use Ubiquity\utils\base\UArray;
use Ubiquity\domains\DDDManager;
use Ubiquity\devtools\cmd\commands\InitAclsCmd;
use Ubiquity\devtools\cmd\commands\DisplayAclsCmd;
use Ubiquity\devtools\cmd\commands\EncryptNewKey;
use Ubiquity\devtools\cmd\commands\LiveReloadCmd;
use Ubiquity\devtools\cmd\commands\NewClassCmd;
use Ubiquity\devtools\core\ConsoleScaffoldController;
use Ubiquity\devtools\cmd\commands\NewDomainCmd;

class Ubiquity {

	use CmdTrait;

	private static $version = '1.3.5';

	private static $appName = 'Ubiquity devtools';

	private static $configOptions;

	private static $toolsConfig;

	private static $devtoolsConfig;

	private static $indexContent = "\n\t\$this->loadView(\"@framework/index/index.html\");\n";

	private static $activeDir;

	private static $activeProjectDir;

	private static $checkProjectDir = '.ubiquity';

	private static $toolsPath = 'devtools/';

	private static ?\Symfony\Component\Process\Process $p;

	private static $servers = [
		'php' => [
			'files' => [
				'/devtools/server/.htrouter.php' => '.ubiquity/.htrouter.php',
				'/devtools/server/_index.php' => '.ubiquity/_index.php'
			],
			'config' => 'config.php',
			'start' => '.htrouter.php'
		],
		'react' => [
			'files' => [
				'/devtools/server/_react.php' => '.ubiquity/_react.php'
			],
			'config' => 'react-config.php',
			'checkClass' => '\\Ubiquity\\servers\\react\\ReactServer',
			'require' => 'phpmv/ubiquity-reactphp',
			'start' => '_react.php'
		],
		'swoole' => [
			'files' => [
				'/devtools/server/_swoole.php' => '.ubiquity/_swoole.php'
			],
			'config' => 'swoole-config.php',
			'checkClass' => '\\Ubiquity\\servers\\swoole\\SwooleServer',
			'require' => 'phpmv/ubiquity-swoole',
			'start' => '_swoole.php'
		],
		'workerman' => [
			'files' => [
				'/devtools/server/_workerman.php' => '.ubiquity/_workerman.php'
			],
			'config' => 'workerman-config.php',
			'checkClass' => '\\Ubiquity\\servers\\workerman\\WorkermanServer',
			'require' => 'phpmv/ubiquity-workerman',
			'start' => '_workerman.php start'
		],
		'roadrunner' => [
			'files' => [],
			'config' => 'config.php',
			'checkClass' => '\\RoadRunnerUbiquity\\Request',
			'require' => 'lapinskas/roadrunner-ubiquity'
		]
	];

	protected static function loadDevtoolsConfig() {
		if (\file_exists(self::$checkProjectDir . \DS . 'devtoolsConfig.php')) {
			self::$devtoolsConfig = include self::$checkProjectDir . \DS . 'devtoolsConfig.php';
		}
		self::$devtoolsConfig['cmd-pattern'] ??= 'commands' . \DS . '*.cmd.php';
	}

	protected static function addAdminDependencies() {
		self::addComposerDependencies(self::$toolsConfig['composer']['require-dev'], ' --dev');
		self::addComposerDependencies(self::$toolsConfig['composer']['require']);
	}

	protected static function addComposerDependencies($parts, $options = '') {
		$result = 0;
		foreach ($parts as $composer => $version) {
			system("composer require {$composer}:{$version}{$options}", $result);
		}
	}

	protected static function getAnnotationsLibrary() {
		$annotsLibrary = 'phpmv/ubiquity-annotations';
		if (\version_compare(\phpversion(), '8.0.0', '>=')) {
			$annotsLibrary = 'phpmv/ubiquity-attributes';
		}
		return $annotsLibrary;
	}

	public static function createComposerFile() {
		self::$toolsConfig['composer']['require-dev'][self::getAnnotationsLibrary()] = 'dev-main';
		$composer = \json_encode(self::$toolsConfig['composer'], \JSON_PRETTY_PRINT);
		echo ConsoleFormatter::showInfo("Composer file creation...\n");
		FileUtils::writeFile("composer.json", $composer);
	}

	public static function composer($command) {
		$cmd = 'composer ';
		switch ($command) {
			case 'update':
			case 'upt':
				$cmd .= 'update';
				break;
			case 'optimize':
			case 'opt':
				$cmd .= ' install --optimize-autoloader --classmap-authoritative --no-dev';
				break;
			case 'nodev':
			case 'no-dev':
				$cmd .= ' update --no-dev';
				break;
			default:
				$cmd .= 'install';
				break;
		}
		\system($cmd);
	}

	public static function replaceAll($array, $subject) {
		\array_walk($array, function (&$item) {
			if (\is_array($item))
				$item = \implode("\n", $item);
		});
		return \str_replace(\array_keys($array), \array_values($array), $subject);
	}

	public static function openReplaceWrite($source, $destination, $keyAndValues) {
		$str = FileUtils::openFile($source);
		$str = self::replaceAll($keyAndValues, $str);
		return FileUtils::writeFile($destination, $str);
	}

	public static function create($projectName, $options, $force = false, $composerCreateProject = false) {
		self::$activeDir = dirname(__FILE__);
		self::$toolsConfig = include (self::$activeDir . "/devtools/core/toolsConfig.php");
		$arguments = [
			[
				"b",
				"dbName",
				""
			],
			[
				"t",
				"dbType",
				"mysql"
			],
			[
				"s",
				"serverName",
				"127.0.0.1"
			],
			[
				"p",
				"port",
				"3306"
			],
			[
				"u",
				"user",
				"root"
			],
			[
				"w",
				"password",
				""
			],
			[
				"m",
				"all-models",
				false
			],
			[
				"a",
				"admin",
				false
			],
			[
				"h",
				"themes",
				""
			],
			[
				"i",
				"siteUrl",
				"http://127.0.0.1/" . $projectName . "/public/"
			],
			[
				"e",
				"rewriteBase",
				$projectName
			]
		];
		if (! $composerCreateProject) {
			if (($dir = basename(getcwd())) == $projectName || $projectName == null) {
				$answer = Console::question("Do you want to create the new project in this folder ($dir) ?", [
					"y",
					"n"
				]);
				if (Console::isYes($answer)) {
					if (chdir("..")) {
						self::create($projectName, $options, true, $composerCreateProject);
						return;
					} else {
						ConsoleFormatter::showMessage("Unable to return to parent folder!\n", 'error');
						return;
					}
				}
			}
		} elseif (! $force) {
			chdir("..");
			self::create($projectName, $options, true, $composerCreateProject);
			return;
		}
		if (! is_dir($projectName) || $force) {
			if (! $force)
				FileUtils::safeMkdir($projectName);
			chdir($projectName);
			FileUtils::safeMkdir(self::$checkProjectDir);
			FileUtils::safeMkdir("app");
			FileUtils::safeMkdir("app/views/main");
			FileUtils::safeMkdir("app/controllers");
			FileUtils::safeMkdir("app/models");
			FileUtils::safeMkdir("app/config");
			FileUtils::safeMkdir("public");
			define('ROOT', realpath('./app') . DS);
			echo ConsoleFormatter::showInfo("Files copy...");
			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/app/controllers/ControllerBase.php", "app/controllers/ControllerBase.php");

			echo ConsoleFormatter::showInfo("Config files creation...\n");
			self::$configOptions["%projectName%"] = $projectName;
			self::$configOptions["%cssFiles%"] = [];
			self::$configOptions["%jsFiles%"] = [];
			self::$configOptions["%injections%"] = "";
			self::$configOptions["%sessionName%"] = \preg_replace("/[^A-Za-z0-9 ]/", '', $projectName);
			foreach ($arguments as $argument) {
				self::$configOptions["%" . $argument[1] . "%"] = self::getOption($options, $argument[0], $argument[1], $argument[2]);
			}
			self::showConfigOptions();
			self::openReplaceWrite(self::$activeDir . "/devtools/project-files/.htaccess", getcwd() . "/public/.htaccess", array(
				"%rewriteBase%" => self::$configOptions["%rewriteBase%"] . '/public'
			));

			if (self::isBooleanTrue(self::$configOptions["%admin%"])) {
				self::adminInstall();
			}

			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/templates/services.tpl", "app/config/services.php");
			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/templates/bootstrap.tpl", "app/config/bootstrap.php");
			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/templates/preloader.script.tpl", "app/config/preloader.script.php");
			self::openReplaceWrite(self::$activeDir . "/devtools/project-files/templates/preloader.config.tpl", "app/config/preloader.config.php", [
				'%hasDatabase%' => self::$configOptions['%dbName%'] != null
			]);
			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/index.php", "public/index.php");
			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/app/.htaccess", "app/.htaccess");

			// -------------Add themes----------------

			$themes = self::$configOptions["%themes%"];
			$themes = array_filter(explode(',', $themes));
			$themesConfig = include (self::$activeDir . "/devtools/core/themesConfig.php");
			$hasThemes = false;
			$activeTheme = "";

			$vendorCopies = [];
			foreach ($themes as $theme) {
				if (isset($themesConfig[$theme])) {
					$vendorCopies[$theme] = InstallThemeCmd::addTheme($theme, $theme, $themesConfig[$theme], self::$activeDir, false, self::$toolsConfig["composer"]);
					$hasThemes = true;
				} else {
					echo ConsoleFormatter::showMessage('The theme <b>' . $theme . '</b> does not exists!', 'warning', 'Themes installation');
				}
			}
			if (! $hasThemes) {
				self::includeDefaultStyles();
				self::openReplaceWrite(self::$activeDir . "/devtools/project-files/templates/vHeader.tpl", "app/views/main/vHeader.html", self::$configOptions);
				self::openReplaceWrite(self::$activeDir . "/devtools/project-files/templates/vFooter.tpl", "app/views/main/vFooter.html", self::$configOptions);
				FileUtils::xcopy(self::$activeDir . "/devtools/project-files/app/views/themes/semantic/main/vMenu.html", "app/views/main/vMenu.html");
				self::$configOptions['%activeTheme%'] = '';
				FileUtils::xcopy(self::$activeDir . "/devtools/project-files/public/themes/semantic/", getcwd() . "/public/assets/");
			} else {
				$activeTheme = end($themes);
				self::$configOptions['%activeTheme%'] = ',"activeTheme"=>"' . $activeTheme . '"';
				FileUtils::xcopy(self::$activeDir . "/devtools/project-files/templates/indexThemes.tpl", "app/views/index.html");
			}
			FileUtils::xcopy(self::$activeDir . "/devtools/project-files/app/controllers/IndexController.php", "app/controllers/IndexController.php");

			// -------------Add themes----------------

			self::openReplaceWrite(self::$activeDir . "/devtools/project-files/templates/config.tpl", "app/config/config.php", self::$configOptions);
			self::openReplaceWrite(self::$activeDir . "/devtools/project-files/README.md", getcwd() . "/README.md", self::$configOptions);

			if (! $composerCreateProject) {
				self::createComposerFile();
				$answer = Console::question("Do you want to run composer install ?", [
					"y",
					"n"
				]);
				if (Console::isYes($answer)) {
					system("composer install");
					require_once ROOT . './../vendor/autoload.php';
					$dir = getcwd();
					foreach ($vendorCopies as $theme => $vCopies) {
						InstallThemeCmd::copyVendorFiles($theme, $vCopies, $dir);
					}
					$config = require_once 'app/config/config.php';
					\Ubiquity\controllers\Startup::setConfig($config);

					if (self::isBooleanTrue(self::$configOptions["%all-models%"])) {
						ob_start();
						\Ubiquity\cache\CacheManager::start($config);
						(new \Ubiquity\orm\creator\database\DbModelsCreator())->create($config);
						$res = ob_get_clean();
						echo ConsoleFormatter::showMessage($res, 'success', 'models generation');
					}
					ob_start();
					\Ubiquity\cache\CacheManager::checkCache($config);
					$res = ob_get_clean();
					echo ConsoleFormatter::showMessage($res, 'info', 'cache initialization');
					echo ConsoleFormatter::showMessage("project <b>{$projectName}</b> successfully created.", 'success', 'new-project');
				} else {
					echo ConsoleFormatter::showMessage("Project <b>{$projectName}</b> is partialy created.\nYou will need to run `composer install` in the root folder of the project.\nThen `Ubiquity init-cache` to initialize the cache folders.\n", 'info');
				}
			} else {
				$annotsLibrary = self::getAnnotationsLibrary();
				\system('composer require ' . $annotsLibrary . ' --dev');
				echo ConsoleFormatter::showMessage("project <b>{$projectName}</b> successfully created.", 'success', 'new-project from composer');
			}
		} else {
			echo ConsoleFormatter::showInfo("The <b>{$projectName}</b> folder already exists !\n");
			$answer = Console::question("Would you like to continue ?", [
				"y",
				"n"
			]);
			if (Console::isYes($answer)) {
				self::create($projectName, $options, true);
			} else
				die();
		}
	}

	private static function includeDefaultStyles() {
		self::$configOptions["%injections%"] = "\"@exec\"=>[\"jquery\"=>function(\$controller){
				\t\treturn \\Ajax\\php\\ubiquity\\JsUtils::diSemantic(\$controller);
				\t}]";
		self::$configOptions["%cssFiles%"][] = self::includeCss(self::$toolsConfig["cdn"]["semantic"]["css"]);
		self::$configOptions["%jsFiles%"][] = self::includeJs(self::$toolsConfig["cdn"]["jquery"]);
		self::$configOptions["%jsFiles%"][] = self::includeJs(self::$toolsConfig["cdn"]["semantic"]["js"]);
		self::$toolsConfig["composer"]["require"]["phpmv/php-mv-ui"] = "^2.4";
	}

	private static function adminInstall($config = null) {
		if (! class_exists("\\Ubiquity\\controllers\\admin\\UbiquityMyAdminBaseController")) {
			self::$toolsConfig["composer"]["require-dev"]["phpmv/ubiquity-webtools"] = "^2.3";
		}
		FileUtils::xcopy(self::$activeDir . "/devtools/project-files/app/controllers/Admin.php", "app/controllers/Admin.php");
		echo ConsoleFormatter::showInfo("Creating the Controller <b>Admin</b> at the location <b>app/controllers/Admin.php<:b>\n");
		self::$toolsConfig["composer"]["require-dev"]["czproject/git-php"] = "^3.13";
		self::$toolsConfig["composer"]["require"]["phpmv/php-mv-ui"] = "^2.4";
	}

	private static function includeCss($filename) {
		return "{{ css('" . $filename . "') }}";
	}

	private static function includeJs($filename) {
		return "{{ js('" . $filename . "') }}";
	}

	private static function showConfigOptions() {
		$output = implode("\n", array_map(function ($v, $k) {
			if (\is_array($v))
				$v = \implode(",", $v);
			return \sprintf("%s='%s'", str_ireplace("%", "", $k), $v);
		}, self::$configOptions, array_keys(self::$configOptions)));
		echo ConsoleFormatter::showMessage($output . "\n", 'info', 'Command line arguments');
	}

	public static function createController($controllerName, $view = false) {
		$scaffold = new ConsoleScaffoldController();
		echo $scaffold->_createController($controllerName, [
			'%baseClass%' => '\\controllers\\ControllerBase'
		], 'controller.tpl', $view);
	}

	private static function setDir($dir = null) {
		if (\file_exists($dir) && \is_dir($dir)) {
			$microDir = $dir . DIRECTORY_SEPARATOR . self::$checkProjectDir;
			if (\file_exists($microDir) && \is_dir($microDir)) {
				\chdir($dir);
				self::$activeProjectDir = $dir;
				echo ConsoleFormatter::showInfo('The project folder is <b>' . FileUtils::cleanPathname(self::$activeProjectDir) . '</b>');
				return true;
			}
		}
		$newDir = dirname($dir);
		if ($newDir === $dir)
			return false;
		else
			return self::setDir($newDir);
	}

	private static function selfUpdate() {
		self::_init();
		$updated = false;
		if (\dirname(self::$activeDir, 4) !== self::$activeProjectDir) {
			if (Console::isYes(Console::question("Do you want to run composer global update ?", [
				"y",
				"n"
			]))) {
				system("composer global update");
				$updated = true;
			}
		}
		if (Console::isYes(Console::question("Do you want to run composer update ?", [
			"y",
			"n"
		]))) {
			system("composer update");
			$updated = true;
		}
		if ($updated) {
			echo ConsoleFormatter::showMessage("project in <b>" . self::$activeProjectDir . "</b> successfully updated.", 'success', 'self-update');
		} else {
			echo ConsoleFormatter::showInfo("Update operation cancelled for project in <b>" . self::$activeProjectDir . "</b>.");
		}
	}

	private static function displayResult($callback) {
		\ob_start();
		$callback();
		$res = \ob_get_clean();
		echo ConsoleFormatter::showInfo($res);
	}

	private static function checkDatabase($part, $config, $dbOffset = 'default') {
		$offsets = DAO::getDatabases();
		if (! \in_array($dbOffset, $offsets)) {
			echo ConsoleFormatter::showMessage('The connection ' . $dbOffset . ' does not exists in config file!', 'error', $part);
			return false;
		}
		$dbConfig = DAO::getDbOffset($config, $dbOffset);
		if (! isset($dbConfig["dbName"])) {
			echo ConsoleFormatter::showMessage('The connection ' . $dbOffset . ' has no dbName value in config file!', 'error', $part);
			return false;
		}
		return true;
	}

	public static function getAppVersion() {
		return self::$appName . " (" . self::$version . ")";
	}

	public static function run($command, ...$options) {
		$options = \array_merge([
			__FILE__,
			$command
		], $options);
		$_SERVER['argv'] = $GLOBALS['argv'] = $options;
		self::init($command);
	}

	public static function composerCreateProject() {
		\putenv('ANSICON=1');
		self::create(\basename(getcwd()), [
			'a' => true
		], false, true);
	}

	private static function updateDomain($options) {
		$domain = self::getOption($options, 'o', 'domain', '');
		if ($domain != '') {
			$domains = DDDManager::getDomains();
			if (\array_search($domain, $domains) !== false) {
				DDDManager::setDomain($domain);
			} else {
				throw new \Ubiquity\exceptions\UbiquityException("Domain `$domain` doesn't exist!");
			}
		}
		return $domain;
	}

	private static function parseCommand($command) {
		$command = str_replace([
			'-',
			':'
		], '_', $command);
		return \strtolower(\preg_replace([
			'/([a-z\d])([A-Z])/',
			'/([^_])([A-Z][a-z])/'
		], '$1_$2', $command));
	}

	public static function init($command, $current = 2) {
		global $argv;
		\set_exception_handler(array(
			Ubiquity::class,
			'error'
		));

		$what = $argv[$current] ?? null;
		if ($what != null && \strpos($what, '=') !== false) {
			$what = null;
		}
		$options = self::parseArguments();
		$command = self::parseCommand($command);
		switch ($command) {
			case 'mailer':
				$config = self::_init();
				$what = self::requiredParam($what, 'queue');
				InfoMailerCmd::run($config, $options, $what);
				break;
			case 'send_mail':
			case 'send_mails':
				$config = self::_init();
				$what = self::requiredParam($what, 'queue');
				SendMailQueueCmd::run($config, $options, $what);
				break;
			case 'new_mail':
				$config = self::_init();
				$what = self::requiredParam($what, 'classname');
				NewMailCmd::run($config, $options, $what);
				break;
			case 'domain':
			case 'new_domain':
				$config = self::_init();
				$what = self::requiredParam($what, 'name');
				NewDomainCmd::run($config, $options, $what);
				break;
			case 'project':
			case 'create_project':
			case 'new':
				self::create($what, $options);
				break;
			case 'composer_create_project':
				self::composerCreateProject();
				break;
			case 'all_models':
			case 'create_all_models':
				$config = self::_init();
				$offset = self::getOption($options, "d", "database", 'default');
				$memberAccess = self::getOption($options, "a", "access", 'private');
				self::updateDomain($options);
				if (self::checkDatabase('create-all-models', $config, $offset)) {
					self::displayResult(function () use ($config, $offset, $memberAccess) {
						\Ubiquity\cache\CacheManager::start($config);
						(new \Ubiquity\orm\creator\database\DbModelsCreator())->create($config, true, null, $offset, $memberAccess);
					});
				}
				break;

			case 'model':
			case 'create_model':
				$config = self::_init();
				$offset = self::getOption($options, "d", "database", 'default');
				$what = self::requiredParam($what, 'tableName');
				$memberAccess = self::getOption($options, "a", "access", 'private');
				self::updateDomain($options);
				if (self::checkDatabase('create-model', $config, $offset)) {
					self::displayResult(function () use ($config, $what, $offset, $memberAccess) {
						\Ubiquity\cache\CacheManager::start($config);
						(new \Ubiquity\orm\creator\database\DbModelsCreator())->create($config, true, $what, $offset, $memberAccess);
					});
				}
				break;

			case 'controller':
			case 'create_controller':
				$config = self::_init();
				$what = self::requiredParam($what, 'controllerName');
				$view = self::getOption($options, "v", "views", false);
				self::updateDomain($options);
				self::createController($what, $view);
				break;

			case 'crud':
			case 'crud_controller':
				$config = self::_init();
				$what = self::requiredParam($what, 'controllerName');
				CrudCmd::run($config, $options, $what);
				break;

			case 'crud_index':
			case 'crud_index_controller':
				$config = self::_init();
				$what = self::requiredParam($what, 'controllerName');
				IndexCrudCmd::run($config, $options, $what);
				break;

			case 'auth':
			case 'auth_controller':
				self::_init();
				AuthCmd::run($config, $options, $what);
				break;

			case 'clear_cache':
				$type = self::getOption($options, "t", "type", "all");
				$config = self::_init();
				CacheManager::clearCache($config, $type);
				break;
			case 'action':
			case 'new_action':
				$config = self::_init();
				NewActionCmd::run($config, $options, $what);
				break;
			case 'class':
			case 'new_class':
				$config = self::_init();
				NewClassCmd::run($config, $options, $what);
				break;

			case 'init_cache':
				$type = self::getOption($options, "t", "type", "all");
				$config = self::_init();
				ob_start();
				CacheManager::initCache($config, $type);
				$res = ob_get_clean();
				echo ConsoleFormatter::showMessage($res, 'success', 'init-cache:' . $type);
				break;

			case 'acl_init':
				$config = self::_init();
				InitAclsCmd::run($config);
				break;

			case 'acl_display':
				$config = self::_init();
				DisplayAclsCmd::run($config, $options);
				break;

			case 'new_key':
				$config = self::_init();
				$what = self::requiredParam($what, 'cypher');
				EncryptNewKey::run($config, $what);
				break;

			case 'self_update':
				self::selfUpdate();
				break;

			case 'bootstrap':
			case 'boot':
				$config = self::_init();
				$what = self::requiredParam($what, 'mode');
				self::bootstrap($config, $what);
				break;

			case 'admin':
				$config = self::_init();
				self::adminInstall($config);
				self::addAdminDependencies();
				break;

			case 'composer':
			case 'compo':
				$config = self::_init();
				$what = self::requiredParam($what, 'command');
				self::composer($what);
				break;

			case 'help':
				self::_init(true);
				HelpCmd::run(__CLASS__, $what);
				break;

			case 'serve':
				$dPort = 8095;
				$lrPort = 35729;
				$noLr = false;
				$type = self::getOption($options, 't', 'type', 'php');
				if (isset(self::$servers[$type])) {
					$host = self::getOption($options, 'h', 'host', '127.0.0.1');
					if ($type == 'php') {
						$dPort = 8090;
						$port = self::getOption($options, 'l', 'lrport', $lrPort);
						$noLr = self::getOption($options, 'n', 'nolr', $noLr);
					}
					$port = self::getOption($options, 'p', 'port', $dPort);

					if (($p = (int) $port) != $port || ! ($p > 0 && $p < 26000)) {
						echo ConsoleFormatter::showMessage($port . " is an invalid port number!", 'error');
						exit(1);
					}
					self::startServer($host, $port, $type, $noLr, $lrPort);
				} else {
					echo ConsoleFormatter::showMessage(sprintf('The server %s does not exists!', $type), 'error', 'Server starting');
				}
				break;
			case 'live_reload':
			case 'livereload':
			case 'live':
				$config = self::_init();
				LiveReloadCmd::run($config, $options, $what, \ROOT);
				break;
			case 'serve_stop':
			case 'stop_serve':
				$what = self::requiredParam($what, 'type');
				self::stopServer($what);
				break;
			case 'version':
				$v = 'PHP ' . \phpversion() . "\n";
				$v .= self::$appName . " (" . self::$version . ")\n";
				$config = self::_init(true);
				if (\is_array($config)) {
					if (\class_exists("\\Ubiquity\\controllers\\admin\\UbiquityMyAdminBaseController")) {
						$v .= 'Ubiquity webtools (' . \Ubiquity\controllers\admin\UbiquityMyAdminBaseController::version . ")\n";
					}
					$v .= 'Ubiquity ' . Framework::version . "\n";
				}
				$v .= 'OS: ' . \php_uname() . "\n";
				echo ConsoleFormatter::showInfo($v);
				break;

			case 'info_routes':
			case 'info_r':
				$config = self::_init();
				InfoRoutesCmd::run($config, $options, $what);
				break;

			case 'info_model':
				$config = self::_init();
				InfoModelCmd::run($config, $options, $what);
				break;

			case 'info_models':
				$config = self::_init();
				InfoModelsCmd::run($config, $options, $what);
				break;

			case 'config':
			case 'info_config':
				$config = self::_init();
				ConfigCmd::run($config, $options, $what);
				break;

			case 'info_validators':
			case 'info_validation':
				$config = self::_init();
				InfoValidationCmd::run($config, $options, $what);
				break;

			case 'config_set':
				$config = self::_init();
				ConfigSetCmd::run($config, $options);
				break;

			case 'dao':
				$config = self::_init();
				DAOCmd::run($config, $options, $what);
				break;

			case 'rest':
			case 'rest_controller':
				$config = self::_init();
				RestCmd::run($config, $options, $what);
				break;

			case 'restapi':
			case 'restapi_controller':
				$config = self::_init();
				RestApiCmd::run($config, $options, $what);
				break;

			case 'create-theme':
			case 'create:theme':
				$config = self::_init();
				NewThemeCmd::run($config, $options, $what, self::$activeDir);
				break;

			case 'install_theme':
			case 'theme':
				$config = self::_init();
				InstallThemeCmd::run($config, $options, $what, self::$activeDir);
				break;
			case 'create_command':
				$config = self::_init();
				CreateCommandCmd::run($config, $options, $what, self::$devtoolsConfig, __CLASS__);
				break;
			default:
				$config = self::_init();
				$customCommands = Command::getCustomCommands();
				if (isset($customCommands[$command])) {
					$cmd = $customCommands[$command];
					return $cmd->run($config, $options, $what, self::$activeDir);
				}
				$aliases = Command::getCustomAliases();
				if (isset($aliases[$command])) {
					$cmd = $aliases[$command];
					return $cmd->run($config, $options, $what, self::$activeDir);
				}

				$commands = Command::getInfo($command);
				echo ConsoleFormatter::showMessage("The command {$command} does not exists!", 'warning');
				if (\count($commands) > 0) {
					$cmd = \current($commands)["cmd"];
					$answer = Console::question("Did you mean {$cmd->getName()}?", [
						"y",
						"n"
					]);
					if (Console::isYes($answer)) {
						self::init($cmd->getName());
					} else {
						exit(1);
					}
				}
				break;
		}
	}

	private static function checkPort($ip, $port) {
		$fp = @\fsockopen($ip, $port, $errno, $errstr, 0.1);
		if ($fp) {
			fclose($fp);
			return false;
		}
		return true;
	}

	private static function startServer($host, $port, $type = 'php', $noLr = false, $lrPort = 35729) {
		if (self::checkPort($host, $port)) {
			$serverInfos = self::$servers[$type];
			$what = $host . ':' . $port;
			self::_init();
			if (isset($serverInfos['checkClass'])) {
				$checkClass = $serverInfos['checkClass'];
				if (! \class_exists($checkClass, true)) {
					$require = $serverInfos['require'];
					echo ConsoleFormatter::showInfo('composer require ' . $require);
					system('composer require ' . $require);
				}
			}
			$msg = "Starting " . $type . " server at <b>" . $what . "</b>...\n";

			foreach ($serverInfos['files'] as $fileSrc => $fileDest) {
				if (! \file_exists($fileDest)) {
					FileUtils::xcopy(self::$activeDir . $fileSrc, $fileDest);
				}
			}

			if (\file_exists(".ubiquity/" . $serverInfos['config'])) {
				$config = include ".ubiquity/" . $serverInfos['config'];
				$updated = $config['host'] != $host || $config['port'] != $port;
			}
			if (! isset($config) || $updated) {
				$config['host'] = $host;
				$config['port'] = $port;
				$config['sessionName'] = uniqid('s');
				$content = "<?php\nreturn " . UArray::asPhpArray($config, 'array') . ';';
				if (@\file_put_contents('.ubiquity' . \DS . $serverInfos['config'], $content, LOCK_EX) === false) {
					throw new \Exception('Unable to write config file: .ubiquity' . \DS . $serverInfos['config']);
				}
			}
			\register_shutdown_function(function () {
				self::shutdown();
			});
			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
				sapi_windows_set_ctrl_handler(function () {
					self::shutdown();
				});
			} else {
				declare(ticks = 1);
				\pcntl_signal(SIGINT, function () {
					self::shutdown();
				});
			}

			switch ($type) {
				case 'php':
					if (! $noLr) {
						if (FileUtils::systemCommandExists('livereload')) {
							$lr = "livereload " . \ROOT . " -e php,html -x cache/,logs/ -p 35729 -d";
							self::$p = new \Symfony\Component\Process\Process([
								'livereload',
								\ROOT,
								'-e',
								'php,html',
								'-x',
								'cache/,logs/',
								'-p',
								$lrPort,
								'-d'
							]);
							echo ConsoleFormatter::showInfo("Starting livereload server on <b>{$lrPort}</b> port...");
							self::$p->start();
							if (self::$p->isRunning()) {
								echo ConsoleFormatter::showInfo("Livereload server started on <b>{$lrPort}</b> port\n");
							} else {
								echo ConsoleFormatter::showMessage("Livereload fail to start on <b>{$lrPort}</b> port\n", 'error', 'live-reload');
							}
						} else {
							echo ConsoleFormatter::showMessage("Problem starting livereload, check livereload installation with <b>npm install -g livereload</b>.\n", 'warning', 'live-reload');
						}
					}
					echo ConsoleFormatter::showInfo($msg . "Press Ctrl+C to stop it!\n");
					system('php -S ' . $what . ' -t ' . getcwd() . \DS . 'public .ubiquity' . \DS . '.htrouter.php &');
					break;
				case 'react':
					echo ConsoleFormatter::showInfo($msg . "Press Ctrl+C to stop it!\n");
					system('php .ubiquity' . \DS . '_react.php ' . $what . ' &');
					break;
				case 'swoole':
				case 'workerman':
					echo ConsoleFormatter::showMessage($msg . "Use <b>Ubiquity serve:stop</b> {$type} to stop it!\n");
					system('php .ubiquity' . \DS . $serverInfos['start']);
					break;
				case 'roadrunner':
					if (! \file_exists("rr")) {
						system('vendor/bin/rr-ub-install');
					}
					echo ConsoleFormatter::showInfo($msg . "Press Ctrl+C to stop it!\n");
					system('./rr serve -v -d -o http.address=' . $host . ':' . $port . ' &');
					break;
			}
		} else {
			$message ??= ConsoleFormatter::showMessage("the port $port is occupied!", 'error', 'Server starting');
			echo $message;
		}
	}

	private static function shutdown() {
		if (isset(self::$p)) {
			if (! self::$p->isTerminated()) {
				self::$p->signal(9);
				echo ConsoleFormatter::showInfo($msg . "Livereload server stopped.");
			}
			self::$p = null;

			echo PHP_EOL . 'Bye!' . PHP_EOL;
			exit();
		}
	}

	private static function stopServer($type) {
		$serverInfos = self::$servers[$type];
		self::_init(true);
		$checkClass = $serverInfos['checkClass'];
		if (class_exists($checkClass, true)) {
			$server = new $checkClass();
			$config = [];
			if (\file_exists(".ubiquity/" . $serverInfos['config'])) {
				$config = include ".ubiquity/" . $serverInfos['config'];
			}
			$server->setOptions($config);
			try {
				if ($server->stop()) {
					echo ConsoleFormatter::showMessage($type . ' server stopped.');
				} else {
					echo ConsoleFormatter::showMessage($type . ' server is not stopped!', 'warning', 'Server stop');
				}
			} catch (\Exception $e) {
				echo ConsoleFormatter::showMessage($e->getMessage(), 'error', 'Server stop');
			}
		} else {
			echo ConsoleFormatter::showMessage($type . ' server is not installed!', 'error', 'Server stop');
		}
	}

	private static function bootstrap(&$config, $mode) {
		$file = ROOT . DS . 'config/bootstrap.php';
		if (\file_exists($file)) {
			include $file;
			$function_name = '_' . $mode;
			if (\function_exists($function_name)) {
				$self = new self();
				if ($function_name === '_routes') {
					if (\function_exists('_routes')) {
						echo ConsoleFormatter::showInfo("Try to execute initialize dynamic routes...");
						\Ubiquity\cache\CacheManager::startProd($config);
						\Ubiquity\cache\CacheManager::initCache($config, 'controllers', true);
						\Ubiquity\controllers\Router::start();
						_routes($self, $config);
						\Ubiquity\cache\CacheManager::storeDynamicRoutes();
					}
				} else {
					try {
						if (\function_exists('bs_before')) {
							bs_before($self, $config);
						}
						echo ConsoleFormatter::showInfo("Try to execute {$function_name} function...");
						\call_user_func($function_name, $self, $config);
						if (\function_exists('bs_after')) {
							bs_after($self, $config);
						}
						echo ConsoleFormatter::showMessage("Bootstrap for {$mode} is ok!", 'success');
					} catch (\Exception $e) {
						echo ConsoleFormatter::showMessage($e->getMessage(), 'error', 'Exception ' . $e->getCode());
					}
				}
			} else {
				echo ConsoleFormatter::showMessage("Function {$function_name} does not exists!", 'error', 'Bootstrap');
			}
		} else {
			echo ConsoleFormatter::showMessage("File {$file} does not exists!", 'error', 'Bootstrap');
		}
	}

	private static function _init($silent = false) {
		self::$activeDir = dirname(__FILE__);
		if (! self::setDir(getcwd())) {
			if ($silent) {
				return;
			}
			echo ConsoleFormatter::showMessage("Failed to locate project root folder\nAn Ubiquity project must contain the <b>" . self::$checkProjectDir . "</b> folder.", 'error');
			die();
		}
		if (! defined('ROOT')) {
			define('ROOT', realpath('./app') . DS);
		}
		require_once ROOT . './../vendor/autoload.php';
		self::loadDevtoolsConfig();
		Command::preloadCustomCommands(self::$devtoolsConfig);
		if (isset(\Ubiquity\controllers\Startup::$config)) {
			$config = \Ubiquity\controllers\Startup::$config;
		} else {
			$config = require_once 'app/config/config.php';
			\Ubiquity\controllers\Startup::setConfig($config);
		}
		return $config;
	}

	private static function isBooleanTrue($s) {
		return $s === true || $s === "true" || $s === 1 || $s === "1";
	}

	public static function error($exception) {
		$msg = "\n<b>Message</b> : " . ConsoleFormatter::colorize($exception->getMessage(), ConsoleFormatter::LIGHT_GRAY) . "\n<b>File</b> : " . $exception->getFile() . "\n<b>Line : </b> " . $exception->getLine();
		echo ConsoleFormatter::showMessage($msg, 'error');
	}
}

error_reporting(E_ALL);

if (! defined('DS')) {
	define('DS', DIRECTORY_SEPARATOR);
}

Ubiquity::init($argv[1] ?? 'help');
